# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("bot1", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/matrix-org/matrix-react-sdk.git',
        workdir='gitpoller-workdir', branch='develop',
        pollinterval=300))

c['change_source'].append(changes.GitPoller(
        'git://github.com/matrix-org/matrix-js-sdk.git',
        workdir='gitpoller-workdir', branch='develop',
        pollinterval=300))

c['change_source'].append(changes.GitPoller(
        'git://github.com/vector-im/riot-web.git',
        workdir='gitpoller-workdir', branch='develop',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'dist' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='develop'),
                            treeStableTimer=None,
                            builderNames=["dist"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["dist"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='http://github.com/matrix-org/matrix-js-sdk.git', mode='incremental', branch='develop', workdir='matrix-js-sdk'))
factory.addStep(steps.Git(repourl='http://github.com/matrix-org/matrix-react-sdk.git', mode='incremental', branch='develop', workdir='matrix-react-sdk'))
factory.addStep(steps.Git(repourl='http://github.com/vector-im/riot-web.git', mode='incremental', branch='develop', workdir='riot-web'))
# link libs and install deps (requires npm)
factory.addStep(steps.ShellCommand(command=["npm", "install"], workdir="matrix-js-sdk"))
factory.addStep(steps.ShellCommand(command=["npm", "install", "source-map-loader"], workdir="matrix-js-sdk"))

factory.addStep(steps.ShellCommand(command=["npm", "install"], workdir="matrix-react-sdk"))
# rm -r node_modules/matrix-js-sdk; ln -s ../../matrix-js-sdk node_modules/
factory.addStep(steps.ShellCommand(command=["rm", "-r", "node_modules/matrix-js-sdk"], workdir="matrix-react-sdk"))
factory.addStep(steps.ShellCommand(command=["ln", "-s", "../../matrix-js-sdk node_modules/"], workdir="matrix-react-sdk"))

factory.addStep(steps.ShellCommand(command=["npm", "install"], workdir="riot-web"))
# rm -r node_modules/matrix-js-sdk; ln -s ../../matrix-js-sdk node_modules/
factory.addStep(steps.ShellCommand(command=["rm", "-r", "node_modules/matrix-js-sdk"], workdir="riot-web"))
factory.addStep(steps.ShellCommand(command=["ln", "-s", "../../matrix-js-sdk node_modules/"], workdir="riot-web"))
# rm -r node_modules/matrix-react-sdk; ln -s ../../matrix-react-sdk node_modules/
factory.addStep(steps.ShellCommand(command=["rm", "-r", "node_modules/matrix-react-sdk"], workdir="riot-web"))
factory.addStep(steps.ShellCommand(command=["ln", "-s", "../../matrix-react-sdk node_modules/"], workdir="riot-web"))

factory.addStep(steps.ShellCommand(command=["npm", "run", "dist"], workdir="riot-web"))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="dist",
      workernames=["bot1"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Riot-Web"
c['titleURL'] = "https://riot.im"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "https://riot.nordgedanken.de/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 80),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
